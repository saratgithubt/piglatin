{"version":3,"sources":["ccomponent/StyledPLTComponents.tsx","model/StringMutations.ts","ccomponent/TextInput.tsx","ccomponent/PigLatinComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StyledHead5","style","h2","DivMessage","div","DivBody","StyledButton","button","StyledResetButton","StyledTextArea","textarea","StringMutations","input","Promise","resolve","reject","inputArray","split","SPACE","map","mapItem","processHypenRule","join","error","Error","HYPEN","EMPTY","isWordStartsWithOval","translateOvals","translateConsonents","quoteArray","QUOTE","placeOfQuote","length","endsWith","WAY","addQuote","firstChar","getFirstChar","secondChar","getSecondChar","ALLCAPS","test","toUpperCase","substring","toLowerCase","AY","replaceQuoteInput","replace","firstStringLength","charAt","RegExp","OVALS","TextInput","props","useState","inputData","setInputData","translate","doTranslation","status","setStatus","valRef","useRef","validateText","event","validationResults","data","updateStatus","trim","id","ref","data-testid","onBlur","e","target","value","onBlurTextArea","onClick","then","translatedOutPut","catch","toString","translation","type","current","dispatchEvent","CustomEvent","detail","name","readOnly","PigLatinComponent","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.8ec2c4f6.chunk.js","sourcesContent":["import style from 'styled-components';\n\nexport const StyledHead5 = style.h2`\n       color:white;\n       background-color: #382c34;\n       box-border:1px solid;\n       border: 2px solid grey;\n       margin: 0 0.1em;\n       padding: 0.25em 1em;      \n`;\n\n\nexport const DivMessage = style.div`\n       color:brown;\n       font-size: calc(3px + 2vmin);\n       cursor: pointer;       \n       background: transparent;    \n       border-radius: 3px;    \n       border: 2px solid lightgrey;\n       margin: 10%;\n       padding: 2%;\n       height: .3em;\n`;\n\nexport const DivBody = style.div`\n       color:brown;\n       font-size: calc(3px + 2vmin);\n       border-color: lightgrey;\n       cursor: pointer;       \n       background: transparent;    \n       border-radius: 3px;    \n       border: 2px solid grey;\n       margin: 0.1%;\n       padding: 5%;\n       height: 20em;\n       transition: 0.5s all ease-out;\n       \n       &:hover {\n           border-color: black;\n           background-color:  #e5e6e7;\n           \n       }\n`;\nexport const StyledButton = style.button`     \n       background-color:white;\n       font-size: calc(10px + 2vmin);\n       cursor: pointer;    \n       border-radius: 3px;\n       color: palevioletred;\n       border: 2px solid palevioletred;\n       margin: 0 1em;\n       padding: 0.25em 1em;\n       transition: 0.5s all ease-out;\n\n       &:hover {\n         background-color: palevioletred;\n         color: white;\n       }\n\n       &:active {\n         border-color: green;\n         color: black;\n         border: 16px solid brown;\n       }      \n`;\n\n\nexport const StyledResetButton = style.button`     \n       background-color:white;\n       font-size: calc(10px + 2vmin);\n       cursor: pointer;    \n       border-radius: 3px;\n       color: palevioletred;\n       border: 2px solid palevioletred;\n       margin: 0 1em;\n       padding: 0.25em 1em;\n       transition: 0.5s all ease-out;\n\n       &:hover {\n         background-color: palevioletred;\n         color: white;\n       }\n\n       &:active {\n         border-color: green;\n         color: black;\n         border: 16px solid brown;\n       }      \n`;\nexport const StyledTextArea = style.textarea`     \n       background-color:white;\n       font-size: calc(10px + 2vmin);\n       cursor: pointer;      \n       font-size: 16px;\n       border-radius: 3px;\n       color: black;\n       border: 2px solid brown;\n       margin:0%;\n       padding: 1%;\n       transition: 0.5s all ease-out;\n       height: 20em;\n       width: 20em;\n\n       &:hover {\n           border-color: green;\n           color: black;\n       }\n\n      \n`;\n\n","export class StringMutations {\n\n    public static translate(input: string): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            try {\n                let inputArray = input.split(SPACE);\n                inputArray = inputArray.map((mapItem) => {\n                    return StringMutations.processHypenRule(mapItem);\n                });\n                return resolve(inputArray.join(SPACE));\n            } catch (error) {\n                reject(new Error('Internal Error : Failed to Translate'));\n            }\n        });\n\n    }\n\n    public static processHypenRule(input: string): string {\n        let inputArray = input.split(HYPEN);\n        inputArray = inputArray.map((mapItem) => {\n            if (mapItem === EMPTY) return mapItem as string;            \n            return StringMutations.isWordStartsWithOval(mapItem) ? StringMutations.translateOvals(mapItem) : StringMutations.translateConsonents(mapItem);\n        })\n        return inputArray.join(HYPEN);\n    }\n\n    public static translateOvals(input: string): string {\n        let quoteArray = input.split(QUOTE);\n        const placeOfQuote:number = quoteArray.length > 1 ? quoteArray[1].length: -1;\n        input = input + ((!input.endsWith(WAY)) ? WAY : EMPTY);       \n        return (placeOfQuote === -1) ? input : StringMutations.addQuote(input, placeOfQuote) ;\n\n    }\n\n\n    public static translateConsonents(input: string): string {\n        const quoteArray = input.split(QUOTE);\n        const placeOfQuote:number = quoteArray.length > 1 ? quoteArray[1].length: -1;\n        const length = input.length;\n        const firstChar: string = StringMutations.getFirstChar(input);\n        const secondChar: string = StringMutations.getSecondChar(input);\n        const isFirstCharUpper = ALLCAPS.test(firstChar);\n        input = ((isFirstCharUpper ? secondChar.toUpperCase() : secondChar)) + (length > 1 ? (input.substring(2, length)) + firstChar.toLowerCase() : EMPTY) + (AY);        \n        return (placeOfQuote === -1) ? input : StringMutations.addQuote(input, placeOfQuote) ;\n    }\n\n    private static addQuote(input: string, placeOfQuote: number): string {\n        const replaceQuoteInput = input.replace(QUOTE, EMPTY);\n        const firstStringLength:number =replaceQuoteInput.length-placeOfQuote;\n        return (replaceQuoteInput.substring(0,firstStringLength) + QUOTE + replaceQuoteInput.substring(firstStringLength, replaceQuoteInput.length));\n    }\n\n    public static getFirstChar(input: string): string {\n        return input.charAt(0);\n    }\n\n    public static getSecondChar(input: string): string {\n        return input.length > 1 ? input.charAt(1) : input.charAt(0);\n    }\n\n\n    public static getLastChar(input: string): string {\n        return input.charAt(input.length - 1);\n    }\n\n    public static isWordStartsWithOval(input: string): boolean {      \n        return new RegExp(OVALS).test(input.charAt(0));\n    }\n\n}\n\nconst WAY = 'way';\nconst EMPTY = '';\nconst QUOTE = '\\'';\nconst ALLCAPS = new RegExp('[A-Z]');\nconst AY = 'ay';\nconst OVALS = 'a|e|i|o|u|A|E|I|O|U';\nconst SPACE = ' ';\nconst HYPEN = '-';","import React, { useState, useRef } from 'react';\nimport { DivBody, StyledTextArea, StyledButton, StyledResetButton, DivMessage } from './StyledPLTComponents';\nimport { StringMutations } from '../model/StringMutations';\n\ntype ButtonEvent = React.MouseEvent<HTMLButtonElement>;\ntype FocusEvent = React.FocusEvent<HTMLTextAreaElement>;\n\nfunction TextInput(props: {}) {\n\n    const [inputData, setInputData] = useState('');\n    const [translate, doTranslation] = useState('');\n    const [status, setStatus] = useState('');\n    const valRef = useRef<HTMLTextAreaElement>(null);\n\n    const translation = (event: ButtonEvent): void => {\n        doTranslation('')\n        const transulate = () => {\n            StringMutations.translate(inputData).then(\n                (translatedOutPut: string) => {\n                    doTranslation(translatedOutPut as string);\n                    setStatus(\"Done...\")\n                }\n            ).catch(\n                e => setStatus(e.toString())\n            )\n        };\n        (validateText(event) === 'In progress...') && transulate();\n    };\n\n    const validateText = (event: ButtonEvent) => {\n        const updateStatus = (data: string) => {\n            switch (data) {\n                case '': return 'No data Found : Enter the Valid Input in left Text Box';\n                default: return 'In progress...';\n            }\n        }\n        const validationResults = updateStatus(inputData.trim())\n        setStatus(validationResults);\n        return validationResults;\n    };\n\n    const clearAll = (event: ButtonEvent) => {\n        setStatus('');\n        doTranslation('');\n        setInputData('');\n        if (valRef && valRef.current) {\n            valRef.current.value = '';\n            // valRef.current.addEventListener('clear',{\n\n            // })\n            valRef.current.dispatchEvent(new CustomEvent(\"clear\", {\n                detail: { name: \"pig laten reseting done..\" }\n            }));\n        }\n    }\n\n    const onBlurTextArea = (e: FocusEvent) => {\n        setInputData(e.target.value)\n    }\n\n    return (\n        <div>\n            <DivBody>\n                <StyledTextArea id='lefttextarea1' ref={valRef} data-testid=\"lefttextarea1\" onBlur={(e) => onBlurTextArea(e)} />\n                <StyledButton onClick={(e) => translation(e)}>Translate</StyledButton>\n                <StyledResetButton type='reset' onClick={(e) => clearAll(e)}>clear</StyledResetButton>\n                <StyledTextArea data-testid=\"righttextarea1\" readOnly value={translate} />\n                <DivMessage data-testid=\"statusdiv1\" >{status}</DivMessage>\n            </DivBody>\n        </div>\n    );\n\n}\n\nexport default TextInput;","import React from 'react';\nimport TextInput from './TextInput';\nimport { StyledHead5 } from './StyledPLTComponents';\n\nfunction PigLatinComponent() {\n    return (\n        <div>\n            <StyledHead5>Pig Latin Translator</StyledHead5>\n            <TextInput/>        \n        </div>\n    );\n}\n\nexport default PigLatinComponent; ","import React from 'react';\nimport './App.css';\n\nimport PigLatinComponent from './ccomponent/PigLatinComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PigLatinComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}